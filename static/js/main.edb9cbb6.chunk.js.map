{"version":3,"sources":["serviceWorker.js","texts.js","components/Header.js","components/Loaders.js","api/index.js","components/Search.js","components/Repositories.js","components/Repository.js","App.js","index.js"],"names":["Boolean","window","location","hostname","match","Header","className","texts","icon","SmallLoader","BigLoader","handleErrors","response","ok","Error","statusText","FetchData","url","navigator","onLine","fetch","then","json","FetchRepositories","options","username","FetchCommits","owner","repository","Search","state","inputText","error","loading","handleSubmit","e","a","async","setState","props","repositories","preventDefault","length","message","onSubmit","this","onFocus","target","select","placeholder","onChange","value","Component","Repositories","style","index","backgroundColor","color","map","item","key","to","login","name","Repository","commits","params","date","Date","commit","author","src","avatar_url","alt","committed","toLocaleDateString","withRouter","App","handleRepositories","basename","path","exact","library","add","fab","faSearch","faLongArrowAltLeft","ReactDOM","render","document","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.edb9cbb6.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","export default\r\n{\r\n    \"header-title\": \"Github API Example\",\r\n    \"search-label\": \"Search repositories with username\",\r\n    \"user-error\": \"Set a username\",\r\n    \"repository-error\": \"No repositories\",\r\n    \"no-internet\": \"No internet connection\",\r\n    \"repository\": \"Repository\",\r\n    \"committed\": \"Committed on\"\r\n}","import React from \"react\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\n\r\nimport texts from \"../texts\";\r\n\r\nfunction Header() {\r\n  return (\r\n    <header className=\"App-header\">\r\n      <div className=\"Header-content\">\r\n        <p className=\"Header-title\">{texts[\"header-title\"]}</p>\r\n        <FontAwesomeIcon className=\"Header-logo\" icon={[\"fab\", \"github\"]} />\r\n      </div>\r\n    </header>\r\n  );\r\n}\r\n\r\nexport default Header;\r\n","import React from 'react';\r\n\r\nexport const SmallLoader = () => (\r\n    <div className=\"Small-loader\"></div>\r\n);\r\n\r\nexport const BigLoader = () => (\r\n    <div className=\"Big-loader\"></div>\r\n);","\r\n// Handle errors and return response or throw error statusText\r\nfunction handleErrors(response) {\r\n  if (!response.ok) {\r\n    throw Error(response.statusText);\r\n  }\r\n  return response;\r\n}\r\n\r\n// check if is internet connection and return response\r\nfunction FetchData(url) {\r\n  if (window.navigator.onLine === false) {\r\n    throw new Error(\"No internet connection\");\r\n  } else {\r\n    return fetch(url)\r\n      .then(handleErrors)\r\n      .then((response) => response.json());\r\n  }\r\n}\r\n\r\nexport function FetchRepositories(options) {\r\n  const url = `https://api.github.com/users/${options.username}/repos`;\r\n  return FetchData(url);\r\n}\r\n\r\nexport function FetchCommits(options) {\r\n  const url = `https://api.github.com/repos/${options.owner}/${options.repository}/commits?per_page=10`;\r\n  return FetchData(url);\r\n}\r\n","import React, { Component } from \"react\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\n\r\nimport { SmallLoader } from \"./Loaders\";\r\n\r\nimport { FetchRepositories } from \"../api\";\r\n\r\nimport texts from \"../texts\";\r\n\r\n// Component to search repositories with username\r\nclass Search extends Component {\r\n  state = {\r\n    inputText: \"\",\r\n    error: \"\",\r\n    loading: false,\r\n  };\r\n\r\n  // Function to handle search input and fetch repositories\r\n  handleSubmit = async (e) => {\r\n    this.setState({ error: \"\" });\r\n    this.props.repositories([]);\r\n    e.preventDefault();\r\n    if (this.state.inputText === \"\") {\r\n      this.setState({ error: texts[\"user-error\"] });\r\n      \r\n    } else {\r\n      this.setState({ loading: true });\r\n      const username = this.state.inputText;\r\n      let options = {\r\n        username,\r\n      };\r\n      // If is repositories function send those to app component via props\r\n      try {\r\n        const repositories = await FetchRepositories(options);\r\n        const error = repositories.length ? \"\" : texts[\"repository-error\"];\r\n        this.setState({ error: error, loading: false });\r\n        this.props.repositories(repositories);\r\n      } catch (error) {\r\n        this.setState({ error: error.message, loading: false });\r\n      }\r\n    }\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"Search\">\r\n        <form onSubmit={this.handleSubmit}>\r\n          <label>{texts[\"search-label\"]}</label>\r\n          <input\r\n            className=\"Search-input\"\r\n            onFocus={(e) => e.target.select()}\r\n            placeholder=\"username\"\r\n            onChange={(e) => this.setState({ inputText: e.target.value })}\r\n            value={this.state.inputText}\r\n          />\r\n          <button className=\"Search-button\">\r\n            {this.state.loading ? (\r\n              <SmallLoader />\r\n            ) : (\r\n              <FontAwesomeIcon icon=\"search\" />\r\n            )}\r\n          </button>\r\n          {this.state.error ? (\r\n            <p className=\"Error\">{this.state.error}</p>\r\n          ) : null}\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Search;\r\n","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\n// Component shows all repositories\r\nfunction Repositories(props) {\r\n  // Function to set style depends, that is it the row index even or not\r\n  function style(index) {\r\n    if (index % 2 === 0) {\r\n      return { backgroundColor: \"#737373\", color: \"#ffffff\" };\r\n    } else {\r\n      return { backgroundColor: \"#ffffff\", color: \"#737373\" };\r\n    }\r\n  }\r\n\r\n  return (\r\n    <ul>\r\n      {props.repositories.map((item, index) => (\r\n        <li key={index} style={style(index)} className=\"Repositories\">\r\n          <Link\r\n            style={style(index)}\r\n            className=\"Repositories-link\"\r\n            to={`/${item.owner.login}/${item.name}`}\r\n          >\r\n            {item.name}\r\n          </Link>\r\n        </li>\r\n      ))}\r\n    </ul>\r\n  );\r\n}\r\n\r\nexport default Repositories;\r\n","import React, { Component } from \"react\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { withRouter } from \"react-router\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nimport { BigLoader } from \"./Loaders\";\r\n\r\nimport { FetchCommits } from \"../api\";\r\nimport texts from \"../texts\";\r\n\r\n// Component shows all commits\r\nclass Repository extends Component {\r\n  state = {\r\n    commits: [],\r\n    repository: \"\",\r\n    loading: true,\r\n    error: \"\",\r\n  };\r\n\r\n  // Fetch commits when component is loaded\r\n  async componentDidMount() {\r\n    this.setState({ error: \"\" });\r\n    const owner = this.props.match.params.owner;\r\n    const repository = this.props.match.params.repository;\r\n    let options = {\r\n      owner,\r\n      repository,\r\n    };\r\n    try {\r\n      const commits = await FetchCommits(options);\r\n      this.setState({\r\n        commits: commits,\r\n        repository: repository,\r\n        loading: false,\r\n      });\r\n    } catch (error) {\r\n      this.setState({ error: error.message, loading: false });\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"Repository-content\">\r\n        {this.state.loading ? (\r\n          <BigLoader />\r\n        ) : (\r\n          <div>\r\n            <Link to=\"/\">\r\n              <FontAwesomeIcon className=\"back\" icon=\"long-arrow-alt-left\" />\r\n            </Link>\r\n            {this.state.error ? (\r\n              <p className=\"Error\">{this.state.error}</p>\r\n            ) : (\r\n              <div>\r\n                <p className=\"Repository-title\">\r\n                  {texts.repository}: {this.state.repository}\r\n                </p>\r\n                {this.state.commits.map((item, index) => {\r\n                  const date = new Date(item.commit.author.date);\r\n                  return (\r\n                    <div key={index} className=\"Commit-container\">\r\n                      <p className=\"commit-text\">{item.commit.message}</p>\r\n                      {item.author !== null ? (\r\n                        <img\r\n                          className=\"Commit-avatar\"\r\n                          src={item.author.avatar_url}\r\n                          alt=\"avatar\"\r\n                        />\r\n                      ) : null}\r\n                      <p className=\"Commit-item\">{item.commit.author.name}</p>\r\n                      <p className=\"Commit-item\">\r\n                        {texts.committed} {date.toLocaleDateString()}\r\n                      </p>\r\n                    </div>\r\n                  );\r\n                })}\r\n              </div>\r\n            )}\r\n          </div>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default withRouter(Repository);\r\n","import React, { Component } from 'react';\nimport {\n  HashRouter,\n  Switch,\n  Route\n} from \"react-router-dom\";\n\nimport Header from './components/Header';\nimport Search from './components/Search';\nimport Repositories from './components/Repositories';\nimport Repository from './components/Repository';\n\nimport './App.css';\n\nclass App extends Component {\n\n  state = {\n    repositories: []\n  }\n\n  handleRepositories = (e) => {\n    this.setState({ repositories: e });\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Header />\n        <div className=\"App-container\">\n          <div className=\"App-content\">\n            <HashRouter basename=\"/\">\n              <Switch>\n                <Route path=\"/\" exact>\n                  <Search repositories={(e) => this.handleRepositories(e)} />\n                  <Repositories repositories={this.state.repositories} />\n                </Route>\n                <Route path=\"/:owner/:repository\">\n                  <Repository />\n                </Route>\n              </Switch>\n            </HashRouter>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport * as serviceWorker from './serviceWorker';\n\nimport { library } from '@fortawesome/fontawesome-svg-core';\nimport { fab } from '@fortawesome/free-brands-svg-icons';\nimport { faSearch, faLongArrowAltLeft } from '@fortawesome/free-solid-svg-icons';\n\nimport App from './App';\n\nimport './index.css';\n\nlibrary.add(fab, faSearch, faLongArrowAltLeft)\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}