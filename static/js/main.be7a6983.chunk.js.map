{"version":3,"sources":["serviceWorker.js","components/Header.js","api/index.js","components/Search.js","components/Repositories.js","components/Repository.js","App.js","index.js"],"names":["Boolean","window","location","hostname","match","Header","className","icon","FetchRepositories","username","a","async","fetch","response","json","repositories","ok","Error","length","message","FetchCommits","owner","repository","commits","Search","state","inputText","error","loading","handleSubmit","e","preventDefault","setState","props","onSubmit","this","onFocus","target","select","placeholder","onChange","value","Component","Repositories","style","index","backgroundColor","color","map","item","key","to","login","name","Repository","params","date","Date","commit","author","src","avatar_url","alt","toLocaleDateString","withRouter","App","handleRepositories","path","exact","library","add","fab","faSearch","faLongArrowAltLeft","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.be7a6983.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\n\r\nfunction Header() {\r\n    return (\r\n        <header className=\"App-header\">\r\n            <div className=\"Header-content\">\r\n                <p className=\"Header-title\">Github API Example</p>\r\n                <FontAwesomeIcon className=\"Header-logo\" icon={['fab', 'github']} />\r\n            </div>\r\n        </header>\r\n    )\r\n}\r\n\r\nexport default Header;","// Function to fetch all repositories from selected user\r\nexport async function FetchRepositories(username) {\r\n    try {\r\n        const response = await fetch(`https://api.github.com/users/${username}/repos`);\r\n        const repositories = await response.json();\r\n        if (!response.ok) {\r\n            throw new Error('Search failed');\r\n        }\r\n        if (repositories.length > 0) {\r\n            return repositories\r\n        } else {\r\n            return \"No repositories\"\r\n        }\r\n    } catch (error) {\r\n        return error.message;\r\n    }\r\n}\r\n\r\n// Function to fetch 10 commits from selected repository\r\nexport async function FetchCommits(owner, repository) {\r\n    try {\r\n        const response = await fetch(`https://api.github.com/repos/${owner}/${repository}/commits?per_page=10`);\r\n        const commits = await response.json();\r\n        if (!response.ok) {\r\n            throw new Error('Search failed');\r\n        }\r\n        if (commits.length > 0) {\r\n            return commits\r\n        } else {\r\n            return \"No commits\"\r\n        }\r\n    } catch (error) {\r\n        return error.message;\r\n    }\r\n\r\n}","import React, { Component } from 'react';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\n\r\nimport { FetchRepositories } from '../api';\r\n\r\n// Component to search repositories with username\r\nclass Search extends Component {\r\n\r\n    state = {\r\n        inputText: '',\r\n        error: '',\r\n        loading: false\r\n    }\r\n\r\n    // Function to handle search input\r\n    handleSubmit = async (e) => {\r\n        e.preventDefault()\r\n        if (this.state.inputText === '') {\r\n            this.setState({ error: 'Set a username' });\r\n        } else {\r\n            this.setState({ loading: true });\r\n            const username = this.state.inputText;\r\n            const repositories = await FetchRepositories(username);\r\n            // send props to app.js\r\n            this.props.repositories(repositories);\r\n            this.setState({ error: '', loading: false });\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"Search\">\r\n                <form onSubmit={this.handleSubmit}>\r\n                    <label>\r\n                        Search repositories with username\r\n\t\t\t\t\t</label>\r\n                    <input\r\n                        className=\"Search-input\"\r\n                        onFocus={(e) => e.target.select()}\r\n                        placeholder=\"username\"\r\n                        onChange={(e) => this.setState({ inputText: e.target.value })}\r\n                        value={this.state.inputText}\r\n                    />\r\n                    <button className=\"Search-button\">\r\n                        <FontAwesomeIcon icon=\"search\" />\r\n                    </button>\r\n                    <p className=\"Error\">{this.state.error}</p>\r\n                    {this.state.loading ? <p>Loading...</p> : null}\r\n                </form>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Search;","import React from 'react';\r\nimport {\r\n    Link\r\n} from \"react-router-dom\";\r\n\r\n// Component shows all repositories\r\nfunction Repositories(props) {\r\n    \r\n    // Function to set style depends, that is it the row index even or not\r\n    function style(index) {\r\n        if (index % 2 === 0) {\r\n            return { backgroundColor: \"#737373\", color: \"#ffffff\" }\r\n        } else {\r\n            return { backgroundColor: \"#ffffff\", color: \"#737373\" }\r\n        }\r\n    }\r\n\r\n    return (\r\n        <ul>\r\n            {\r\n                // Show error if fetch have failed\r\n                props.repositories === \"No repositories\" || props.repositories === \"Search failed\" ?\r\n                    <li className=\"Repositories\">{props.repositories}</li> :\r\n                    props.repositories.map((item, index) => (\r\n                        <li key={index} style={style(index)} className=\"Repositories\"><Link style={style(index)} className=\"Repositories-link\" to={`/${item.owner.login}/${item.name}`}>{item.name}</Link></li>\r\n                    ))\r\n            }\r\n        </ul>\r\n    )\r\n}\r\n\r\nexport default Repositories;","import React, { Component } from 'react';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { withRouter } from 'react-router';\r\nimport {\r\n    Link\r\n} from \"react-router-dom\";\r\n\r\nimport { FetchCommits } from '../api';\r\n\r\n// Component shows all commits \r\nclass Repository extends Component {\r\n\r\n    state = {\r\n        commits: [],\r\n        repository: '',\r\n        loading: true\r\n    }\r\n\r\n    async componentDidMount() {\r\n        const owner = this.props.match.params.owner;\r\n        const repository = this.props.match.params.repository;\r\n        const commits = await FetchCommits(owner, repository);\r\n        this.setState({ commits: commits, repository: repository, loading: false });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"Repository-content\">\r\n                <Link to=\"/\"><FontAwesomeIcon className=\"back\" icon=\"long-arrow-alt-left\" /></Link>\r\n                <p className=\"Repository-title\">Repository: {this.state.repository}</p>\r\n                {this.state.loading ? <p>Loading...</p> : null}\r\n                {\r\n                    // Show error if commits fetch have failed\r\n                    this.state.commits === \"Not commits\" || this.state.commits === \"Search failed\" ?\r\n                        <li className=\"Repositories\">{this.state.commits}</li> :\r\n                        this.state.commits.map((item, index) => {\r\n                            const date = new Date(item.commit.author.date);\r\n                            return (\r\n                                <div key={index} className=\"Commit-container\">\r\n                                    <p className=\"commit-text\">{item.commit.message}</p>\r\n                                    {\r\n                                        item.author !== null ?\r\n                                            <img className=\"Commit-avatar\" src={item.author.avatar_url} alt=\"avatar\" />\r\n                                            : null\r\n                                    }\r\n                                    <p className=\"Commit-item\">{item.commit.author.name}</p>\r\n                                    <p className=\"Commit-item\"> Committed on {date.toLocaleDateString()}</p>\r\n                                </div>\r\n                            )\r\n                        })\r\n                }\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default withRouter(Repository);","import React, { Component } from 'react';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route\n} from \"react-router-dom\";\n\nimport Header from './components/Header';\nimport Search from './components/Search';\nimport Repositories from './components/Repositories';\nimport Repository from './components/Repository';\n\nimport './App.css';\n\nclass App extends Component {\n\n  state = {\n    repositories: []\n  }\n\n  handleRepositories = (e) => {\n    this.setState({ repositories: e });\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Header />\n        <h1>asfd</h1>\n        <div className=\"App-container\">\n          <div className=\"App-content\">\n            <Router>\n              <Switch>\n                <Route path=\"/\" exact>\n                  <Search repositories={(e) => this.handleRepositories(e)} />\n                  <Repositories repositories={this.state.repositories} />\n                </Route>\n                <Route path=\"/:owner/:repository\">\n                  <Repository />\n                </Route>\n              </Switch>\n            </Router>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport * as serviceWorker from './serviceWorker';\n\nimport { library } from '@fortawesome/fontawesome-svg-core';\nimport { fab } from '@fortawesome/free-brands-svg-icons';\nimport { faSearch, faLongArrowAltLeft } from '@fortawesome/free-solid-svg-icons';\n\nimport App from './App';\n\nimport './index.css';\n\nlibrary.add(fab, faSearch, faLongArrowAltLeft)\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}